==================
comment
==================

% Derive (varying) atoms

---

(source_file
  (single_comment)
)

==================
multi comment
==================

%* Derive (varying) atoms *%

---

(source_file
  (multi_comment)
)

==================
atom with term
==================

atom(term()).

---

(source_file
  (statement
    (head
      (literal
        (atom
          (identifier)
          (LPAREN)
          (argvec
            (termvec
              (term
                (identifier)
                (LPAREN)
                (RPAREN))))
          (RPAREN))))
    (DOT)))

==================
atom with @term
==================

atom(@term()).

---

(source_file
  (statement
    (head
      (literal
        (atom
          (identifier)
          (LPAREN)
          (argvec
            (termvec
              (term
                (AT) (identifier)
                (LPAREN)
                (RPAREN))))
          (RPAREN))))
    (DOT)))

==================
atom rellitvec
==================

a < b < c.

---

(source_file
  (statement
    (head
      (literal
        (term
          (identifier))
        (rellitvec
          (rellitvec
            (cmp
              (LT))
            (term
              (identifier)))
          (cmp
            (LT))
          (term
            (identifier)))))
    (DOT)))

==================
rule statements
==================

head :-  'body.

---

(source_file
  (statement
    (head
      (literal
        (atom
          (identifier))))
    (IF)
    (bodydot
      (literal
        (atom
          (identifier)))
    (DOT))))

==================
true as identifier
==================

true(A').

---

(source_file
  (statement
    (head
      (literal
        (atom
          (identifier) (LPAREN) 
          (argvec
            (termvec
              (term
                (VARIABLE))))
          (RPAREN))))
    (DOT)))

==================
constant number declaration
==================

#const n=1.

---
(source_file
  (statement
    (CONST)
    (identifier)
    (EQ)
    (constterm
      (NUMBER
        (dec)))
    (DOT)))

==================
constant string declaration
==================

#const n="test%".

---
(source_file
  (statement
    (CONST)
    (identifier)
    (EQ)
    (constterm
      (STRING
        (string_fragment)))
    (DOT)))

==================
show statement 1
==================

#show pred/2.

---
(source_file
  (statement
    (SHOW)
    (identifier)
    (SLASH)
    (NUMBER 
      (dec))
    (DOT)))

==================
show statement 2
==================

#show pred(a,X).

---
(source_file
  (statement
    (SHOW)
    (term
      (identifier)
      (LPAREN)
      (argvec
        (termvec
          (termvec
            (term
              (identifier)))
          (COMMA)
          (term
            (VARIABLE))))
      (RPAREN))
    (DOT)))

==================
maximize statement
==================

#maximize {atom}.

---
(source_file
  (statement
    (MAXIMIZE)
    (LBRACE) 
    (maxelemlist
      (optimizeweight
        (term
          (identifier))))
    (RBRACE)
    (DOT)))


==================
minimise statement
==================

#minimise {X:ccc(X)}.
---
(source_file
  (statement
    (MINIMIZE)
    (LBRACE) 
    (minelemlist
      (optimizeweight
        (term
          (VARIABLE))) 
      (optimizecond
        (COLON)
        (optimizelitvec
          (literal
            (atom
              (identifier)
              (LPAREN)
              (argvec
                (termvec
                  (term
                    (VARIABLE))))
              (RPAREN))))))
    (RBRACE)
    (DOT)))

==================
embedded script
==================

#script (bla)

some script code
#en comment
more script code

#end.

---
(source_file
  (statement
    (SCRIPT)
    (LPAREN)
    (identifier)
    (RPAREN)
    (CODE)
    (DOT)))

==================
theory definition
==================

#theory lp { 
    lin_term {
    + : 0, binary, left
    };
    bounds{
    + : 0, binary, left
    };

    &op/0   : lin_term, {<=,>=,>,<,=,!=}, bounds, any
}.

---
(source_file
  (statement
    (THEORY)
    (theory_identifier (identifier))
    (LBRACE)
    (theory_definition_nlist
      (theory_term_definition
        (theory_definition_identifier
          (identifier))
        (LBRACE)
        (theory_operator_definition_nlist
          (theory_operator_definition
            (theory_op
              (THEORY_OP))
            (COLON)
            (NUMBER
              (dec))
            (COMMA)
            (BINARY)
            (COMMA)
            (LEFT)))
        (RBRACE))
      (SEM)
      (theory_definition_nlist
        (theory_term_definition
          (theory_definition_identifier
            (identifier))
          (LBRACE)
          (theory_operator_definition_nlist
            (theory_operator_definition
              (theory_op
                (THEORY_OP))
              (COLON)
              (NUMBER
                (dec))
              (COMMA)
              (BINARY)
              (COMMA)
              (LEFT)))
          (RBRACE))
        (SEM)
        (theory_definition_nlist
          (theory_atom_definition
            (AND)
            (theory_definition_identifier
              (identifier))
            (SLASH)
            (NUMBER
              (dec))
            (COLON)
            (theory_definition_identifier
              (identifier))
            (COMMA)
            (LBRACE)
            (theory_operator_nlist
              (theory_operator_nlist
                (theory_operator_nlist
                  (theory_operator_nlist
                    (theory_operator_nlist
                      (theory_operator_nlist
                        (theory_op
                          (THEORY_OP)))
                      (COMMA)
                      (theory_op
                        (THEORY_OP)))
                    (COMMA)
                    (theory_op
                      (THEORY_OP)))
                  (COMMA)
                  (theory_op
                    (THEORY_OP)))
                (COMMA)
                (theory_op
                  (THEORY_OP)))
              (COMMA)
              (theory_op
                (THEORY_OP)))
            (RBRACE)
            (COMMA)
            (theory_definition_identifier
              (identifier))
            (COMMA)
            (theory_atom_type
              (ANY))))))
    (RBRACE)
    (DOT)))

==================
theory atom
==================

&sum{x} >= 4000.

---
(source_file
  (statement
    (head
      (luheadaggregate
        (theory_atom
          (AND)
          (theory_atom_name
            (identifier))
          (LBRACE)
          (theory_atom_element_nlist
            (theory_atom_element
              (theory_opterm_nlist
                (theory_opterm
                  (theory_term
                    (identifier))))))
          (RBRACE)
          (theory_op
            (THEORY_OP))
          (theory_opterm
            (theory_term
              (NUMBER
                (dec)))))))
    (DOT)))

==================
term modulo operator
==================

atom(5\2).

---
(source_file
  (statement
    (head
      (literal
        (atom
          (identifier)
          (LPAREN)
          (argvec
            (termvec
              (term
                (term
                  (NUMBER
                    (dec)))
                (MOD)
                (term
                  (NUMBER
                    (dec))))))
          (RPAREN))))
    (DOT)))
