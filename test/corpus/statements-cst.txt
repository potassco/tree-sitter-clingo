==================
comments
:cst
:skip
==================

% foo
%* 
 * bar
 *%

---

1:0 - 5:0   source_file
1:0 - 1:5     line_comment `% foo`
2:0 - 4:3     block_comment 
2:0 - 2:4       `%* \n`
3:0 - 3:7       ` * bar\n`
4:0 - 4:3       ` *%`

==================
rules
:cst
:skip
==================

head.
head :-  body.

---

1:0  - 3:0    source_file
1:0  - 1:5      rule
1:0  - 1:4        head: literal
1:0  - 1:4          atom: symbolic_atom
1:0  - 1:4            name: identifier `head`
1:4  - 1:5        "."
2:0  - 2:14     rule
2:0  - 2:4        head: literal
2:0  - 2:4          atom: symbolic_atom
2:0  - 2:4            name: identifier `head`
2:5  - 2:7        ":-"
2:9  - 2:13       body: body
2:9  - 2:13         body_literal
2:9  - 2:13           atom: symbolic_atom
2:9  - 2:13             name: identifier `body`
2:13 - 2:14       "."

==================
constraints
:cst
:skip
==================

:- body.
:- .

---

1:0 - 3:0   source_file
1:0 - 1:8     integrity_constraint
1:0 - 1:2       ":-"
1:3 - 1:7       body: body
1:3 - 1:7         body_literal
1:3 - 1:7           atom: symbolic_atom
1:3 - 1:7             name: identifier `body`
1:7 - 1:8       "."
2:0 - 2:4     integrity_constraint
2:0 - 2:2       ":-"
2:3 - 2:4       "."

==================
weak constraint
:cst
:skip
==================

:~ a, b. [1@2,1,2,3]
:~ . [0]

---

1:0  - 3:0    source_file
1:0  - 1:20     weak_constraint
1:0  - 1:2        ":~"
1:3  - 1:7        body: body
1:3  - 1:4          body_literal
1:3  - 1:4            atom: symbolic_atom
1:3  - 1:4              name: identifier `a`
1:4  - 1:5          ","
1:6  - 1:7          body_literal
1:6  - 1:7            atom: symbolic_atom
1:6  - 1:7              name: identifier `b`
1:7  - 1:8        "."
1:9  - 1:10       "["
1:10 - 1:13       weight: weight
1:10 - 1:11         term: number `1`
1:11 - 1:12         "@"
1:12 - 1:13         priority: number `2`
1:13 - 1:14       ","
1:14 - 1:19       terms: terms
1:14 - 1:15         number `1`
1:15 - 1:16         ","
1:16 - 1:17         number `2`
1:17 - 1:18         ","
1:18 - 1:19         number `3`
1:19 - 1:20       "]"
2:0  - 2:8      weak_constraint
2:0  - 2:2        ":~"
2:3  - 2:4        "."
2:5  - 2:6        "["
2:6  - 2:7        weight: weight
2:6  - 2:7          term: number `0`
2:7  - 2:8        "]"

==================
minimize
:cst
:skip
==================

#minimize{ 1@3: a; 1: b; 2,3: b,c  }.

---

1:0  - 2:0    source_file
1:0  - 1:37     minimize
1:0  - 1:9        "#minimize"
1:9  - 1:10       "{"
1:11 - 1:33       elements: optimize_elements
1:11 - 1:17         optimize_element
1:11 - 1:14           weight: weight
1:11 - 1:12             term: number `1`
1:12 - 1:13             "@"
1:13 - 1:14             priority: number `3`
1:14 - 1:15           ":"
1:16 - 1:17           condition: condition
1:16 - 1:17             literal
1:16 - 1:17               atom: symbolic_atom
1:16 - 1:17                 name: identifier `a`
1:17 - 1:18         ";"
1:19 - 1:23         optimize_element
1:19 - 1:20           weight: weight
1:19 - 1:20             term: number `1`
1:20 - 1:21           ":"
1:22 - 1:23           condition: condition
1:22 - 1:23             literal
1:22 - 1:23               atom: symbolic_atom
1:22 - 1:23                 name: identifier `b`
1:23 - 1:24         ";"
1:25 - 1:33         optimize_element
1:25 - 1:26           weight: weight
1:25 - 1:26             term: number `2`
1:26 - 1:27           ","
1:27 - 1:28           terms: terms
1:27 - 1:28             number `3`
1:28 - 1:29           ":"
1:30 - 1:33           condition: condition
1:30 - 1:31             literal
1:30 - 1:31               atom: symbolic_atom
1:30 - 1:31                 name: identifier `b`
1:31 - 1:32             ","
1:32 - 1:33             literal
1:32 - 1:33               atom: symbolic_atom
1:32 - 1:33                 name: identifier `c`
1:35 - 1:36       "}"
1:36 - 1:37       "."

==================
maximize
:cst
:skip
==================

#maximize{ }.

---

1:0  - 2:0    source_file
1:0  - 1:13     maximize
1:0  - 1:9        "#maximize"
1:9  - 1:10       "{"
1:11 - 1:12       "}"
1:12 - 1:13       "."

==================
show
:cst
:skip
==================

#show.
#show a/2.
#show -a/2.
#show a/2+1.
#show -a/2+1.
#show -p(X) : q(), c(X).
#show a.

---

1:0  - 8:0    source_file
1:0  - 1:6      show
1:0  - 1:5        "#show"
1:5  - 1:6        "."
2:0  - 2:10     show_signature
2:0  - 2:5        "#show"
2:6  - 2:9        signature: signature
2:6  - 2:7          name: identifier `a`
2:7  - 2:8          "/"
2:8  - 2:9          arity: number `2`
2:9  - 2:10       "."
3:0  - 3:11     show_signature
3:0  - 3:5        "#show"
3:6  - 3:10       signature: signature
3:6  - 3:7          sign: classical_negation `-`
3:7  - 3:8          name: identifier `a`
3:8  - 3:9          "/"
3:9  - 3:10         arity: number `2`
3:10 - 3:11       "."
4:0  - 4:12     show_term
4:0  - 4:5        "#show"
4:6  - 4:11       term: binary_operation
4:6  - 4:9          left: binary_operation
4:6  - 4:7            left: function
4:6  - 4:7              name: identifier `a`
4:7  - 4:8            "/"
4:8  - 4:9            right: number `2`
4:9  - 4:10         "+"
4:10 - 4:11         right: number `1`
4:11 - 4:12       "."
5:0  - 5:13     show_term
5:0  - 5:5        "#show"
5:6  - 5:12       term: binary_operation
5:6  - 5:10         left: binary_operation
5:6  - 5:8            left: unary_operation
5:6  - 5:7              "-"
5:7  - 5:8              right: function
5:7  - 5:8                name: identifier `a`
5:8  - 5:9            "/"
5:9  - 5:10           right: number `2`
5:10 - 5:11         "+"
5:11 - 5:12         right: number `1`
5:12 - 5:13       "."
6:0  - 6:24     show_term
6:0  - 6:5        "#show"
6:6  - 6:11       term: unary_operation
6:6  - 6:7          "-"
6:7  - 6:11         right: function
6:7  - 6:8            name: identifier `p`
6:8  - 6:9            "("
6:9  - 6:10           arguments: terms
6:9  - 6:10             variable `X`
6:10 - 6:11           ")"
6:12 - 6:13       ":"
6:14 - 6:23       body: body
6:14 - 6:17         body_literal
6:14 - 6:17           atom: symbolic_atom
6:14 - 6:15             name: identifier `q`
6:15 - 6:16             "("
6:16 - 6:17             ")"
6:17 - 6:18         ","
6:19 - 6:23         body_literal
6:19 - 6:23           atom: symbolic_atom
6:19 - 6:20             name: identifier `c`
6:20 - 6:21             "("
6:21 - 6:22             arguments: terms
6:21 - 6:22               variable `X`
6:22 - 6:23             ")"
6:23 - 6:24       "."
7:0  - 7:8      show_term
7:0  - 7:5        "#show"
7:6  - 7:7        term: function
7:6  - 7:7          name: identifier `a`
7:7  - 7:8        "."

==================
defined
:cst
:skip
==================

#defined a/2.
#defined -a/2.

---

1:0  - 3:0    source_file
1:0  - 1:13     defined
1:0  - 1:8        "#defined"
1:9  - 1:12       signature: signature
1:9  - 1:10         name: identifier `a`
1:10 - 1:11         "/"
1:11 - 1:12         arity: number `2`
1:12 - 1:13       "."
2:0  - 2:14     defined
2:0  - 2:8        "#defined"
2:9  - 2:13       signature: signature
2:9  - 2:10         sign: classical_negation `-`
2:10 - 2:11         name: identifier `a`
2:11 - 2:12         "/"
2:12 - 2:13         arity: number `2`
2:13 - 2:14       "."

==================
single show
:cst
:skip
==================

#show a/0.

---

1:0  - 2:0    source_file
1:0  - 1:10     show_signature
1:0  - 1:5        "#show"
1:6  - 1:9        signature: signature
1:6  - 1:7          name: identifier `a`
1:7  - 1:8          "/"
1:8  - 1:9          arity: number `0`
1:9  - 1:10       "."

==================
project
:cst
:skip
==================

#project a/2.
#project -a/2.
#project a.
#project a : .
#project a : b.

---

1:0  - 6:0    source_file
1:0  - 1:13     project_signature
1:0  - 1:8        "#project"
1:9  - 1:12       signature: signature
1:9  - 1:10         name: identifier `a`
1:10 - 1:11         "/"
1:11 - 1:12         arity: number `2`
1:12 - 1:13       "."
2:0  - 2:14     project_signature
2:0  - 2:8        "#project"
2:9  - 2:13       signature: signature
2:9  - 2:10         sign: classical_negation `-`
2:10 - 2:11         name: identifier `a`
2:11 - 2:12         "/"
2:12 - 2:13         arity: number `2`
2:13 - 2:14       "."
3:0  - 3:11     project_atom
3:0  - 3:8        "#project"
3:9  - 3:10       atom: symbolic_atom
3:9  - 3:10         name: identifier `a`
3:10 - 3:11       "."
4:0  - 4:14     project_atom
4:0  - 4:8        "#project"
4:9  - 4:10       atom: symbolic_atom
4:9  - 4:10         name: identifier `a`
4:11 - 4:12       ":"
4:13 - 4:14       "."
5:0  - 5:15     project_atom
5:0  - 5:8        "#project"
5:9  - 5:10       atom: symbolic_atom
5:9  - 5:10         name: identifier `a`
5:11 - 5:12       ":"
5:13 - 5:14       body: body
5:13 - 5:14         body_literal
5:13 - 5:14           atom: symbolic_atom
5:13 - 5:14             name: identifier `b`
5:14 - 5:15       "."

==================
const
:cst
:skip
==================

#const x = 1.
#const x = f().
#const x = f((), |x|).
#const x = 1. [default]
#const x = 2. [override]

---

1:0  - 6:0    source_file
1:0  - 1:13     const
1:0  - 1:6        "#const"
1:7  - 1:8        name: identifier `x`
1:9  - 1:10       "="
1:11 - 1:12       value: number `1`
1:12 - 1:13       "."
2:0  - 2:15     const
2:0  - 2:6        "#const"
2:7  - 2:8        name: identifier `x`
2:9  - 2:10       "="
2:11 - 2:14       value: function
2:11 - 2:12         name: identifier `f`
2:12 - 2:13         "("
2:13 - 2:14         ")"
2:14 - 2:15       "."
3:0  - 3:22     const
3:0  - 3:6        "#const"
3:7  - 3:8        name: identifier `x`
3:9  - 3:10       "="
3:11 - 3:21       value: function
3:11 - 3:12         name: identifier `f`
3:12 - 3:13         "("
3:13 - 3:20         arguments: terms
3:13 - 3:15           tuple
3:13 - 3:14             "("
3:14 - 3:15             ")"
3:15 - 3:16           ","
3:17 - 3:20           abs
3:17 - 3:18             "|"
3:18 - 3:19             function
3:18 - 3:19               name: identifier `x`
3:19 - 3:20             "|"
3:20 - 3:21         ")"
3:21 - 3:22       "."
4:0  - 4:23     const
4:0  - 4:6        "#const"
4:7  - 4:8        name: identifier `x`
4:9  - 4:10       "="
4:11 - 4:12       value: number `1`
4:12 - 4:13       "."
4:14 - 4:15       "["
4:15 - 4:22       type: const_type `default`
4:22 - 4:23       "]"
5:0  - 5:24     const
5:0  - 5:6        "#const"
5:7  - 5:8        name: identifier `x`
5:9  - 5:10       "="
5:11 - 5:12       value: number `2`
5:12 - 5:13       "."
5:14 - 5:15       "["
5:15 - 5:23       type: const_type `override`
5:23 - 5:24       "]"

==================
script
:cst
:skip
==================

#script (python)

def main(ctl):
  ctl.ground()

#end.

---

1:0  - 7:0    source_file
1:0  - 6:5      script
1:0  - 1:7        "#script"
1:8  - 1:9        "("
1:9  - 1:15       language: identifier `python`
1:15 - 1:16       ")"
1:16 - 6:0        code: code 
1:16 - 1:17         `\n`
2:16 - 2:1          `\n`
3:16 - 3:15         `def main(ctl):\n`
4:16 - 4:15         `  ctl.ground()\n`
5:16 - 5:1          `\n`
6:0  - 6:4        "#end"
6:4  - 6:5        "."

==================
include
:cst
:skip
==================

#include "a".
#include <b>.

---

1:0  - 3:0    source_file
1:0  - 1:13     include
1:0  - 1:8        "#include"
1:9  - 1:12       string
1:9  - 1:10         "\""
1:10 - 1:11         string_fragment `a`
1:11 - 1:12         "\""
1:12 - 1:13       "."
2:0  - 2:13     include
2:0  - 2:8        "#include"
2:9  - 2:10       "<"
2:10 - 2:11       identifier `b`
2:11 - 2:12       ">"
2:12 - 2:13       "."

==================
program
:cst
:skip
==================

#program base.
#program base().
#program acid(a, b).

---

1:0  - 4:0    source_file
1:0  - 1:14     program
1:0  - 1:8        "#program"
1:9  - 1:13       name: identifier `base`
1:13 - 1:14       "."
2:0  - 2:16     program
2:0  - 2:8        "#program"
2:9  - 2:13       name: identifier `base`
2:13 - 2:14       "("
2:14 - 2:15       ")"
2:15 - 2:16       "."
3:0  - 3:20     program
3:0  - 3:8        "#program"
3:9  - 3:13       name: identifier `acid`
3:13 - 3:14       "("
3:14 - 3:18       parameters: parameters
3:14 - 3:15         identifier `a`
3:15 - 3:16         ","
3:17 - 3:18         identifier `b`
3:18 - 3:19       ")"
3:19 - 3:20       "."

==================
external
:cst
:skip
==================

#external a.
#external -a.
#external a : b.
#external a: .
#external a(X) : p(B). [X]

---

1:0  - 6:0    source_file
1:0  - 1:12     external
1:0  - 1:9        "#external"
1:10 - 1:11       atom: symbolic_atom
1:10 - 1:11         name: identifier `a`
1:11 - 1:12       "."
2:0  - 2:13     external
2:0  - 2:9        "#external"
2:10 - 2:12       atom: symbolic_atom
2:10 - 2:11         sign: classical_negation `-`
2:11 - 2:12         name: identifier `a`
2:12 - 2:13       "."
3:0  - 3:16     external
3:0  - 3:9        "#external"
3:10 - 3:11       atom: symbolic_atom
3:10 - 3:11         name: identifier `a`
3:12 - 3:13       ":"
3:14 - 3:15       body: body
3:14 - 3:15         body_literal
3:14 - 3:15           atom: symbolic_atom
3:14 - 3:15             name: identifier `b`
3:15 - 3:16       "."
4:0  - 4:14     external
4:0  - 4:9        "#external"
4:10 - 4:11       atom: symbolic_atom
4:10 - 4:11         name: identifier `a`
4:11 - 4:12       ":"
4:13 - 4:14       "."
5:0  - 5:26     external
5:0  - 5:9        "#external"
5:10 - 5:14       atom: symbolic_atom
5:10 - 5:11         name: identifier `a`
5:11 - 5:12         "("
5:12 - 5:13         arguments: terms
5:12 - 5:13           variable `X`
5:13 - 5:14         ")"
5:15 - 5:16       ":"
5:17 - 5:21       body: body
5:17 - 5:21         body_literal
5:17 - 5:21           atom: symbolic_atom
5:17 - 5:18             name: identifier `p`
5:18 - 5:19             "("
5:19 - 5:20             arguments: terms
5:19 - 5:20               variable `B`
5:20 - 5:21             ")"
5:21 - 5:22       "."
5:23 - 5:24       "["
5:24 - 5:25       type: variable `X`
5:25 - 5:26       "]"

==================
edge
:cst
:skip
==================

#edge (a,b).
#edge (a,b; b, c).
#edge (a,b; b, c) : q.

---

1:0  - 4:0    source_file
1:0  - 1:12     edge
1:0  - 1:5        "#edge"
1:6  - 1:7        "("
1:7  - 1:10       edge_pair: edge_pair
1:7  - 1:8          function
1:7  - 1:8            name: identifier `a`
1:8  - 1:9          ","
1:9  - 1:10         function
1:9  - 1:10           name: identifier `b`
1:10 - 1:11       ")"
1:11 - 1:12       "."
2:0  - 2:18     edge
2:0  - 2:5        "#edge"
2:6  - 2:7        "("
2:7  - 2:10       edge_pair: edge_pair
2:7  - 2:8          function
2:7  - 2:8            name: identifier `a`
2:8  - 2:9          ","
2:9  - 2:10         function
2:9  - 2:10           name: identifier `b`
2:10 - 2:11       ";"
2:12 - 2:16       edge_pair: edge_pair
2:12 - 2:13         function
2:12 - 2:13           name: identifier `b`
2:13 - 2:14         ","
2:15 - 2:16         function
2:15 - 2:16           name: identifier `c`
2:16 - 2:17       ")"
2:17 - 2:18       "."
3:0  - 3:22     edge
3:0  - 3:5        "#edge"
3:6  - 3:7        "("
3:7  - 3:10       edge_pair: edge_pair
3:7  - 3:8          function
3:7  - 3:8            name: identifier `a`
3:8  - 3:9          ","
3:9  - 3:10         function
3:9  - 3:10           name: identifier `b`
3:10 - 3:11       ";"
3:12 - 3:16       edge_pair: edge_pair
3:12 - 3:13         function
3:12 - 3:13           name: identifier `b`
3:13 - 3:14         ","
3:15 - 3:16         function
3:15 - 3:16           name: identifier `c`
3:16 - 3:17       ")"
3:18 - 3:19       ":"
3:20 - 3:21       body: body
3:20 - 3:21         body_literal
3:20 - 3:21           atom: symbolic_atom
3:20 - 3:21             name: identifier `q`
3:21 - 3:22       "."

==================
heuristic
:cst
:skip
==================

#heuristic a(). [true,blub]
#heuristic -a(). [true@10,blub]
#heuristic a(X) : q(X). [true@X,blub(X)]

---

1:0  - 4:0    source_file
1:0  - 1:27     heuristic
1:0  - 1:10       "#heuristic"
1:11 - 1:14       atom: symbolic_atom
1:11 - 1:12         name: identifier `a`
1:12 - 1:13         "("
1:13 - 1:14         ")"
1:14 - 1:15       "."
1:16 - 1:17       "["
1:17 - 1:21       weight: weight
1:17 - 1:21         term: function
1:17 - 1:21           name: identifier `true`
1:21 - 1:22       ","
1:22 - 1:26       type: function
1:22 - 1:26         name: identifier `blub`
1:26 - 1:27       "]"
2:0  - 2:31     heuristic
2:0  - 2:10       "#heuristic"
2:11 - 2:15       atom: symbolic_atom
2:11 - 2:12         sign: classical_negation `-`
2:12 - 2:13         name: identifier `a`
2:13 - 2:14         "("
2:14 - 2:15         ")"
2:15 - 2:16       "."
2:17 - 2:18       "["
2:18 - 2:25       weight: weight
2:18 - 2:22         term: function
2:18 - 2:22           name: identifier `true`
2:22 - 2:23         "@"
2:23 - 2:25         priority: number `10`
2:25 - 2:26       ","
2:26 - 2:30       type: function
2:26 - 2:30         name: identifier `blub`
2:30 - 2:31       "]"
3:0  - 3:40     heuristic
3:0  - 3:10       "#heuristic"
3:11 - 3:15       atom: symbolic_atom
3:11 - 3:12         name: identifier `a`
3:12 - 3:13         "("
3:13 - 3:14         arguments: terms
3:13 - 3:14           variable `X`
3:14 - 3:15         ")"
3:16 - 3:17       ":"
3:18 - 3:22       body: body
3:18 - 3:22         body_literal
3:18 - 3:22           atom: symbolic_atom
3:18 - 3:19             name: identifier `q`
3:19 - 3:20             "("
3:20 - 3:21             arguments: terms
3:20 - 3:21               variable `X`
3:21 - 3:22             ")"
3:22 - 3:23       "."
3:24 - 3:25       "["
3:25 - 3:31       weight: weight
3:25 - 3:29         term: function
3:25 - 3:29           name: identifier `true`
3:29 - 3:30         "@"
3:30 - 3:31         priority: variable `X`
3:31 - 3:32       ","
3:32 - 3:39       type: function
3:32 - 3:36         name: identifier `blub`
3:36 - 3:37         "("
3:37 - 3:38         arguments: terms
3:37 - 3:38           variable `X`
3:38 - 3:39         ")"
3:39 - 3:40       "]"
